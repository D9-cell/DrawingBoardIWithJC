package com.example.drawingboardiwithjc

import android.content.Context
import org.tensorflow.lite.Interpreter
import java.nio.ByteBuffer
import java.nio.ByteOrder

class TFLiteClassifier(context: Context) {
    private var interpreter: Interpreter
    private val inputSize = 138
    private val outputSize = 50 // number of classes

    // Paste from Python
    private val featureMeans = floatArrayOf(273.037059f, 254.395193f, 395.773331f, 394.385314f, 165.686197f, 377.568744f, 144.975288f, 123.064104f, 386.394228f, 128.591925f, 16.164555f, 13.144346f, 16.418765f, 14.272334f, 189.272813f, 169.074483f, 188.184002f, 173.657893f, 219.405740f, 223.769493f, 218.600141f, 210.575262f, 202.224295f, 194.577925f, 187.838348f, 182.069376f, 176.800401f, 172.311750f, 168.727925f, 166.240011f, 164.636688f, 163.892917f, 164.064032f, 165.094249f, 166.187827f, 167.305524f, 168.242281f, 169.055395f, 169.681888f, 169.738446f, 169.684472f, 170.103628f, 170.493092f, 171.136274f, 172.286648f, 173.855140f, 175.813155f, 177.913200f, 179.640260f, 181.020943f, 181.634362f, 182.175073f, 182.847496f, 183.655639f, 184.312385f, 185.789652f, 187.857243f, 190.883721f, 195.017387f, 199.906864f, 205.346807f, 210.687184f, 216.775500f, 221.186898f, 224.019156f, 224.833036f, 223.510667f, 222.291392f, 221.675033f, 222.578653f, 224.831694f, 228.726770f, 234.952686f, 243.041458f, 252.860122f, 264.591060f, 277.734354f, 291.960370f, 0.000000f, 25.488462f, 44.918799f, 65.794370f, 87.541201f, 109.264221f, 130.316664f, 150.246536f, 168.453124f, 184.655168f, 199.254446f, 212.407251f, 223.902245f, 234.291739f, 243.319613f, 251.236614f, 257.593322f, 262.748653f, 267.414983f, 271.468688f, 275.171272f, 278.066075f, 280.771836f, 281.727076f, 283.882654f, 287.898391f, 292.995443f, 299.103225f, 306.064178f, 313.410212f, 320.688518f, 326.736127f, 331.860379f, 336.239265f, 339.454141f, 341.977110f, 343.060162f, 343.565586f, 344.321105f, 345.822223f, 347.167349f, 350.554330f, 352.997654f, 355.359852f, 357.654672f, 358.495686f, 357.504284f, 355.559743f, 352.122215f, 348.303928f, 345.368255f, 344.718581f, 345.109747f, 346.820276f, 349.872680f, 354.461963f, 360.271727f, 367.298207f, 375.129230f, 383.752473f)
    private val featureStds = floatArrayOf(31.401124f, 38.334713f, 50.522401f, 45.092017f, 51.806782f, 62.817559f, 52.528071f, 52.412387f, 49.227990f, 55.637441f, 4.137399f, 4.352991f, 4.597855f, 4.472021f, 46.071780f, 47.013309f, 40.757409f, 42.685771f, 89.797699f, 87.961709f, 86.033808f, 85.029984f, 84.326765f, 83.364077f, 82.437942f, 81.093182f, 79.414230f, 77.242473f, 74.938987f, 72.965688f, 72.026627f, 71.861032f, 72.266947f, 72.630620f, 71.832797f, 70.772739f, 70.144546f, 70.176447f, 71.006194f, 71.731260f, 72.713152f, 73.839165f, 74.202592f, 74.617568f, 75.596099f, 77.010107f, 78.504509f, 79.597919f, 79.963116f, 79.007213f, 77.312807f, 75.621127f, 73.599297f, 72.068863f, 71.192237f, 70.442218f, 69.852900f, 69.076963f, 67.962749f, 66.907072f, 65.872993f, 65.153830f, 64.806091f, 63.910025f, 61.857671f, 59.716094f, 56.314537f, 53.756810f, 52.651001f, 53.277867f, 54.255131f, 55.307538f, 56.133674f, 57.804549f, 61.267751f, 67.127418f, 74.873617f, 82.699964f, 1.000000f, 10.640231f, 18.736127f, 25.348230f, 30.741604f, 35.564841f, 40.452835f, 45.580460f, 51.000276f, 56.796501f, 63.032618f, 69.310028f, 75.291962f, 80.728333f, 85.495780f, 89.461630f, 91.704389f, 93.556317f, 95.920709f, 98.860010f, 102.167975f, 105.737845f, 109.842012f, 114.935292f, 119.305330f, 122.768168f, 125.636412f, 127.404776f, 128.247950f, 128.319217f, 127.509927f, 126.584430f, 125.369970f, 123.906455f, 123.486393f, 123.750370f, 125.844235f, 128.236816f, 131.393693f, 134.039905f, 137.212868f, 140.007026f, 144.072436f, 148.354807f, 152.495750f, 156.190736f, 158.878049f, 159.911418f, 160.278817f, 161.175999f, 161.378126f, 160.495787f, 158.510171f, 154.894268f, 150.030773f, 144.096632f, 138.091106f, 133.625778f, 131.702331f, 132.188393f)

    init {
        val assetFileDescriptor = context.assets.openFd("model.tflite")
        val fileInputStream = assetFileDescriptor.createInputStream()
        val fileChannel = fileInputStream.channel
        val startOffset = assetFileDescriptor.startOffset
        val declaredLength = assetFileDescriptor.declaredLength
        val modelBuffer = fileChannel.map(java.nio.channels.FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)

        interpreter = Interpreter(modelBuffer)

    }

    private fun standardize(input: FloatArray): FloatArray {
        return FloatArray(input.size) { i ->
            (input[i] - featureMeans[i]) / featureStds[i]
        }
    }

    fun predict(input: List<Double>): Int {
        require(input.size == inputSize)

        val floatInput = input.map { it.toFloat() }.toFloatArray()
        val standardizedInput = standardize(floatInput)

        val inputBuffer = ByteBuffer.allocateDirect(4 * inputSize).order(ByteOrder.nativeOrder())
        standardizedInput.forEach { inputBuffer.putFloat(it) }

        val output = Array(1) { FloatArray(outputSize) }
        interpreter.run(inputBuffer, output)

        return output[0].indices.maxByOrNull { output[0][it] } ?: -1
    }
}
